generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Post {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String    @db.ObjectId
  image      Image[]
  content    Json?
  comments   Comment[]
}

model Category {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String    @unique
  posts    Post[]
  products Product[]
}

model Product {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String
  quantity      Int
  color         String?
  size          String?
  specification String
  images        Image[]
  category      Category? @relation(fields: [categoryId], references: [id])
  categoryId    String    @db.ObjectId
  discount      Int?
  price         Int
  reviews       Review[]
}

model Image {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  path      String   @unique
  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @db.ObjectId
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?  @db.ObjectId
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?  @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
}

model User {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  nickname String    @unique
  email    String    @unique
  password String
  profile  Profile?
  comment  Comment[]
  role     Role      @default(USER)
  reviews  Review[]
}

model Profile {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  firstName   String?
  lastName    String?
  address     String?
  city        String?
  zipCode     String?
  phoneNumber String?
  user        User?   @relation(fields: [userId], references: [id])
  userId      String  @unique @db.ObjectId
}

enum Role {
  USER
  ADMIN
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Int
  review    String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  product   Product? @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
}
